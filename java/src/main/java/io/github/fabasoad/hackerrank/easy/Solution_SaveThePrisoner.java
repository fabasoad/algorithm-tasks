package io.github.fabasoad.hackerrank.easy;

/**
 * https://www.hackerrank.com/challenges/save-the-prisoner/problem
 */
public class Solution_SaveThePrisoner {

    public static void main(String[] args) {
        var expected = "3\n" +
                       "3\n" +
                       "1\n" +
                       "22815232\n" +
                       "12\n" +
                       "410053348\n" +
                       "10\n" +
                       "7\n" +
                       "6\n" +
                       "13\n" +
                       "5\n" +
                       "5378692\n" +
                       "20\n" +
                       "15\n" +
                       "4\n" +
                       "4\n" +
                       "5\n" +
                       "10\n" +
                       "4\n" +
                       "3\n" +
                       "1\n" +
                       "6\n" +
                       "2\n" +
                       "4\n" +
                       "1\n" +
                       "1\n" +
                       "2\n" +
                       "607\n" +
                       "3\n" +
                       "17\n" +
                       "3\n" +
                       "1\n" +
                       "2\n" +
                       "1\n" +
                       "6\n" +
                       "2\n" +
                       "15\n" +
                       "2\n" +
                       "27\n" +
                       "2\n" +
                       "1\n" +
                       "1\n" +
                       "7\n" +
                       "2\n" +
                       "2\n" +
                       "3\n" +
                       "1\n" +
                       "2\n" +
                       "2\n" +
                       "3\n" +
                       "3\n" +
                       "2\n" +
                       "3\n" +
                       "2\n" +
                       "1\n" +
                       "8\n" +
                       "18843\n" +
                       "1\n" +
                       "2\n" +
                       "9\n" +
                       "13\n" +
                       "6\n" +
                       "1\n" +
                       "1\n" +
                       "1\n" +
                       "1\n" +
                       "7\n" +
                       "3\n" +
                       "2\n" +
                       "2\n" +
                       "9\n" +
                       "2\n" +
                       "7\n" +
                       "14\n" +
                       "3\n" +
                       "9\n" +
                       "3\n" +
                       "6\n" +
                       "7\n" +
                       "3\n" +
                       "3\n" +
                       "3\n" +
                       "1\n" +
                       "1\n" +
                       "1\n" +
                       "5\n" +
                       "2\n" +
                       "5\n" +
                       "6\n" +
                       "1\n" +
                       "3\n" +
                       "4\n" +
                       "11\n" +
                       "3\n" +
                       "5\n" +
                       "1\n" +
                       "38321\n" +
                       "1460445\n" +
                       "10\n" +
                       "1";
        var expectedArr = expected.split("\n");
        var test = "3 394274638 3\n" +
                   "7 615562705 2\n" +
                   "2 739424390 2\n" +
                   "654809340 204894365 472730208\n" +
                   "12 430895283 10\n" +
                   "820162082 641616307 588599124\n" +
                   "11 872829055 1\n" +
                   "8 863472675 5\n" +
                   "6 737005495 6\n" +
                   "13 140874526 1\n" +
                   "5 838370030 1\n" +
                   "7987995 944258007 3704096\n" +
                   "20 452477339 2\n" +
                   "16 316486845 3\n" +
                   "7 371704047 4\n" +
                   "10 847309774 1\n" +
                   "19 326960619 13\n" +
                   "10 995691642 9\n" +
                   "7 116507988 3\n" +
                   "8 94123457 3\n" +
                   "5 559772387 5\n" +
                   "8 68776125 2\n" +
                   "2 950135853 2\n" +
                   "10 871101260 5\n" +
                   "7 202574414 2\n" +
                   "18 179098809 5\n" +
                   "2 241943014 1\n" +
                   "796 906236986 70\n" +
                   "10 351834097 7\n" +
                   "17 807384911 17\n" +
                   "8 315277218 2\n" +
                   "1 809644535 1\n" +
                   "10 817801950 3\n" +
                   "5 440531117 5\n" +
                   "20 880268919 8\n" +
                   "6 293435347 2\n" +
                   "18 19114015 3\n" +
                   "4 735038152 3\n" +
                   "622 756206857 245\n" +
                   "7 482235723 6\n" +
                   "1 332585626 1\n" +
                   "3 917360179 1\n" +
                   "7 382333528 5\n" +
                   "3 910271929 2\n" +
                   "2 559295142 1\n" +
                   "6 852399876 4\n" +
                   "5 507841274 3\n" +
                   "8 703690620 7\n" +
                   "2 731894216 1\n" +
                   "15 315371646 13\n" +
                   "12 450649452 4\n" +
                   "7 100332753 7\n" +
                   "9 304145150 8\n" +
                   "7 80202029 5\n" +
                   "1 269193929 1\n" +
                   "18 950000152 5\n" +
                   "45900 625548176 41768\n" +
                   "9 980493422 6\n" +
                   "2 59893403 2\n" +
                   "10 397424389 1\n" +
                   "20 659990005 9\n" +
                   "8 962771014 1\n" +
                   "1 582734799 1\n" +
                   "1 962681512 1\n" +
                   "1 176253776 1\n" +
                   "7 778510859 2\n" +
                   "9 182827716 2\n" +
                   "5 846583622 2\n" +
                   "18 570581961 6\n" +
                   "17 446480767 11\n" +
                   "10 483724534 6\n" +
                   "3 11307206 1\n" +
                   "7 584440269 1\n" +
                   "14 697311573 8\n" +
                   "4 999357627 1\n" +
                   "17 199341423 9\n" +
                   "7 457329882 2\n" +
                   "6 640291708 3\n" +
                   "10 879791830 8\n" +
                   "3 269794978 3\n" +
                   "3 70223500 3\n" +
                   "8 29789831 5\n" +
                   "1 982193421 1\n" +
                   "5 614503262 5\n" +
                   "2 511908640 2\n" +
                   "8 256981399 7\n" +
                   "5 230221644 4\n" +
                   "6 131578521 3\n" +
                   "7 421457224 1\n" +
                   "1 528381267 1\n" +
                   "4 296324763 1\n" +
                   "13 413984801 9\n" +
                   "15 24726509 13\n" +
                   "3 258277558 3\n" +
                   "15 837095618 13\n" +
                   "1 17894198 1\n" +
                   "93327 722377177 12125\n" +
                   "3830347 568814045 3368104\n" +
                   "12 10766669 6\n" +
                   "8 117991680 2";
        var testArr = test.split("\n");
        for (var i = 0; i < testArr.length; i++) {
            var args1 = testArr[i].split(" ");
            var actual = saveThePrisoner(
                Integer.parseInt(args1[0]), Integer.parseInt(args1[1]), Integer.parseInt(args1[2]));
            assert Integer.parseInt(expectedArr[i]) == actual;
        }
    }

    private static int saveThePrisoner(int n, int m, int s) {
        int result = (m > n ? m % n : m) + (s - 1);
        result = result == 0 ? n : result;
        return result > n ? result - n : result;
    }
}
